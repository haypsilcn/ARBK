
Praktikum04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000284  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800114  00800114  0000032c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000092c  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c6  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000448  00000000  00000000  000014f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001940  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f9  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010d  00000000  00000000  00001dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001ee2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
  9e:	0c 94 40 01 	jmp	0x280	; 0x280 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:

#include"keys.h"


void init(){
	DDRD = 0xff;										// Data direction register D (D0 -> D6) as input
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a b9       	out	0x0a, r24	; 10
	PORTD = (1 << PIND0);								// setting bit for 7-segment
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	8b b9       	out	0x0b, r24	; 11
	
	DDRB = 0x01;										// Data direction register B0 as output, B1 & B2 as input
  ae:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PINB1) | (1 << PINB2);				// setting bit for SW1 and SW2
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	86 60       	ori	r24, 0x06	; 6
  b4:	85 b9       	out	0x05, r24	; 5
	
	cli();												// clear global interrupt flag: interrupts will be immediately disabled
  b6:	f8 94       	cli
	PCICR |= 0x01;										// Pin Change Interrupt Control Register: turn on PortB
  b8:	e8 e6       	ldi	r30, 0x68	; 104
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PINB1) | (1 << PINB2);				// trigger interrupt when PB1's and PB2's state changes
  c2:	eb e6       	ldi	r30, 0x6B	; 107
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	86 60       	ori	r24, 0x06	; 6
  ca:	80 83       	st	Z, r24
	sei();												// set global interrupt enable
  cc:	78 94       	sei
  ce:	08 95       	ret

000000d0 <__vector_3>:
*/

int number[10] = { 64, 121, 36, 48, 25, 18, 2, 120, 0, 16 };		//display number from 0 to 9;
volatile uint32_t count = 0;

ISR(PCINT0_vect){
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	af 93       	push	r26
  e0:	bf 93       	push	r27
	if (bit_is_clear(PINB, PINB1)) {								// sw1 is pressed
  e2:	19 99       	sbic	0x03, 1	; 3
  e4:	2b c0       	rjmp	.+86     	; 0x13c <__vector_3+0x6c>
		if (count == 0) {									
  e6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
  ea:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
  ee:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
  f2:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
  f6:	89 2b       	or	r24, r25
  f8:	8a 2b       	or	r24, r26
  fa:	8b 2b       	or	r24, r27
  fc:	61 f4       	brne	.+24     	; 0x116 <__vector_3+0x46>
			count = 100;											// if count == 0 and sw1 is pressed, set count = 100 then minus 1 and leds will display 99
  fe:	84 e6       	ldi	r24, 0x64	; 100
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 10a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 10e:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 112:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
		}
		count--;
 116:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 11a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 11e:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
 122:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	a1 09       	sbc	r26, r1
 12a:	b1 09       	sbc	r27, r1
 12c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 130:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 134:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 138:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
	}
	if (bit_is_clear(PINB, PINB2)) {								// sw2 is pressed
 13c:	1a 99       	sbic	0x03, 2	; 3
 13e:	2b c0       	rjmp	.+86     	; 0x196 <__vector_3+0xc6>
		if (count == 99) {
 140:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 144:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 148:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
 14c:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
 150:	83 36       	cpi	r24, 0x63	; 99
 152:	91 05       	cpc	r25, r1
 154:	a1 05       	cpc	r26, r1
 156:	b1 05       	cpc	r27, r1
 158:	59 f4       	brne	.+22     	; 0x170 <__vector_3+0xa0>
			count = -1;												// if count == 99 and sw2 is pressed, set count = -1 then plus 1 and leds will display 00
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	9f ef       	ldi	r25, 0xFF	; 255
 15e:	dc 01       	movw	r26, r24
 160:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 164:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 168:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 16c:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
		}
		count++;
 170:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 174:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 178:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
 17c:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	a1 1d       	adc	r26, r1
 184:	b1 1d       	adc	r27, r1
 186:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 18a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 18e:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 192:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
	}
}
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <main>:

int main(void)
{
	init();
 1a8:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
	while(1) {
		int led03 = count % 10;
 1ac:	0f 2e       	mov	r0, r31
 1ae:	fa e0       	ldi	r31, 0x0A	; 10
 1b0:	4f 2e       	mov	r4, r31
 1b2:	51 2c       	mov	r5, r1
 1b4:	61 2c       	mov	r6, r1
 1b6:	71 2c       	mov	r7, r1
 1b8:	f0 2d       	mov	r31, r0
 1ba:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <__data_end>
 1be:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <__data_end+0x1>
 1c2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end+0x2>
 1c6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x3>
 1ca:	a3 01       	movw	r20, r6
 1cc:	92 01       	movw	r18, r4
 1ce:	0e 94 1e 01 	call	0x23c	; 0x23c <__udivmodsi4>
 1d2:	6b 01       	movw	r12, r22
 1d4:	7c 01       	movw	r14, r24
		int led02 = (count - led03) / 10;
 1d6:	80 90 14 01 	lds	r8, 0x0114	; 0x800114 <__data_end>
 1da:	90 90 15 01 	lds	r9, 0x0115	; 0x800115 <__data_end+0x1>
 1de:	a0 90 16 01 	lds	r10, 0x0116	; 0x800116 <__data_end+0x2>
 1e2:	b0 90 17 01 	lds	r11, 0x0117	; 0x800117 <__data_end+0x3>
			
		display(led03, number);
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	71 e0       	ldi	r23, 0x01	; 1
 1ea:	c6 01       	movw	r24, r12
 1ec:	0e 94 0c 01 	call	0x218	; 0x218 <display>
		display(led02, number);
 1f0:	0d 2c       	mov	r0, r13
 1f2:	00 0c       	add	r0, r0
 1f4:	ee 08       	sbc	r14, r14
 1f6:	ff 08       	sbc	r15, r15
 1f8:	c5 01       	movw	r24, r10
 1fa:	b4 01       	movw	r22, r8
 1fc:	6c 19       	sub	r22, r12
 1fe:	7d 09       	sbc	r23, r13
 200:	8e 09       	sbc	r24, r14
 202:	9f 09       	sbc	r25, r15
 204:	a3 01       	movw	r20, r6
 206:	92 01       	movw	r18, r4
 208:	0e 94 1e 01 	call	0x23c	; 0x23c <__udivmodsi4>
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	71 e0       	ldi	r23, 0x01	; 1
 210:	c9 01       	movw	r24, r18
 212:	0e 94 0c 01 	call	0x218	; 0x218 <display>
 216:	d1 cf       	rjmp	.-94     	; 0x1ba <main+0x12>

00000218 <display>:
 */ 

#include "sevenseg.h"
void display(int num, int numList[]) {

	PORTD = numList[num];
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	fb 01       	movw	r30, r22
 21e:	e8 0f       	add	r30, r24
 220:	f9 1f       	adc	r31, r25
 222:	80 81       	ld	r24, Z
 224:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	8f e3       	ldi	r24, 0x3F	; 63
 228:	9c e9       	ldi	r25, 0x9C	; 156
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <display+0x12>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <display+0x18>
 230:	00 00       	nop
	_delay_ms(10);
	PORTB ^= (1 << PINB0);
 232:	95 b1       	in	r25, 0x05	; 5
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	89 27       	eor	r24, r25
 238:	85 b9       	out	0x05, r24	; 5
 23a:	08 95       	ret

0000023c <__udivmodsi4>:
 23c:	a1 e2       	ldi	r26, 0x21	; 33
 23e:	1a 2e       	mov	r1, r26
 240:	aa 1b       	sub	r26, r26
 242:	bb 1b       	sub	r27, r27
 244:	fd 01       	movw	r30, r26
 246:	0d c0       	rjmp	.+26     	; 0x262 <__udivmodsi4_ep>

00000248 <__udivmodsi4_loop>:
 248:	aa 1f       	adc	r26, r26
 24a:	bb 1f       	adc	r27, r27
 24c:	ee 1f       	adc	r30, r30
 24e:	ff 1f       	adc	r31, r31
 250:	a2 17       	cp	r26, r18
 252:	b3 07       	cpc	r27, r19
 254:	e4 07       	cpc	r30, r20
 256:	f5 07       	cpc	r31, r21
 258:	20 f0       	brcs	.+8      	; 0x262 <__udivmodsi4_ep>
 25a:	a2 1b       	sub	r26, r18
 25c:	b3 0b       	sbc	r27, r19
 25e:	e4 0b       	sbc	r30, r20
 260:	f5 0b       	sbc	r31, r21

00000262 <__udivmodsi4_ep>:
 262:	66 1f       	adc	r22, r22
 264:	77 1f       	adc	r23, r23
 266:	88 1f       	adc	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	1a 94       	dec	r1
 26c:	69 f7       	brne	.-38     	; 0x248 <__udivmodsi4_loop>
 26e:	60 95       	com	r22
 270:	70 95       	com	r23
 272:	80 95       	com	r24
 274:	90 95       	com	r25
 276:	9b 01       	movw	r18, r22
 278:	ac 01       	movw	r20, r24
 27a:	bd 01       	movw	r22, r26
 27c:	cf 01       	movw	r24, r30
 27e:	08 95       	ret

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
