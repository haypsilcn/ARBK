
Praktikum04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000208  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000208  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000092b  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d5  00000000  00000000  00000c97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000434  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  000018a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ed  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ec  00000000  00000000  00001d29  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001e15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_3>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  8e:	0c 94 02 01 	jmp	0x204	; 0x204 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init>:

#include"keys.h"


void init(){
	DDRD = 0xff;		//set pins D0 ->D6: output pins
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x01;		//set pin  B0 as output pins. B1,B2 as input pin
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	84 b9       	out	0x04, r24	; 4
	PORTD = (1<<PIND0);
  9e:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<PINB1)|(1<<PINB2); // pull ups for pin B1, B2
  a0:	85 b1       	in	r24, 0x05	; 5
  a2:	86 60       	ori	r24, 0x06	; 6
  a4:	85 b9       	out	0x05, r24	; 5
	
	cli();
  a6:	f8 94       	cli
	PCICR |= (1<<PCIE0);			//Interrupt from Port B
  a8:	e8 e6       	ldi	r30, 0x68	; 104
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	80 83       	st	Z, r24
	PCMSK0|= (1<<PINB1)|(1<<PINB2); // Pins b1 and b2 will interrupts
  b2:	eb e6       	ldi	r30, 0x6B	; 107
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	86 60       	ori	r24, 0x06	; 6
  ba:	80 83       	st	Z, r24
	sei();
  bc:	78 94       	sei
  be:	08 95       	ret

000000c0 <__vector_3>:
#include "sevenseg.h"

int number[10] = {64,79,36,48,25,18,2,88,0,16}; //display number from 0 to 9;
volatile uint32_t count = 99;

ISR(PCINT0_vect){
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
	if(bit_is_clear(PINB,PINB1)) //when sw1 is pressed
  d2:	19 99       	sbic	0x03, 1	; 3
  d4:	13 c0       	rjmp	.+38     	; 0xfc <__vector_3+0x3c>
	count++;
  d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  da:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  de:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
  e2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	a1 1d       	adc	r26, r1
  ea:	b1 1d       	adc	r27, r1
  ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  f0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  f4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
  f8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	if(bit_is_clear(PINB,PINB2)) // when sw2 is pressed
  fc:	1a 99       	sbic	0x03, 2	; 3
  fe:	13 c0       	rjmp	.+38     	; 0x126 <__vector_3+0x66>
	count--;
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 104:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 108:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 10c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	a1 09       	sbc	r26, r1
 114:	b1 09       	sbc	r27, r1
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 11a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 11e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 122:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
}
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <main>:

int main(void)
{
	init();
 138:	0e 94 4b 00 	call	0x96	; 0x96 <init>
	while(1){
		int z = count/10;
 13c:	0f 2e       	mov	r0, r31
 13e:	fa e0       	ldi	r31, 0x0A	; 10
 140:	8f 2e       	mov	r8, r31
 142:	91 2c       	mov	r9, r1
 144:	a1 2c       	mov	r10, r1
 146:	b1 2c       	mov	r11, r1
 148:	f0 2d       	mov	r31, r0
		int e = count - z*10;
		display(e,number);
 14a:	16 ef       	ldi	r17, 0xF6	; 246

int main(void)
{
	init();
	while(1){
		int z = count/10;
 14c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 150:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 154:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 158:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 15c:	a5 01       	movw	r20, r10
 15e:	94 01       	movw	r18, r8
 160:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <__udivmodsi4>
 164:	69 01       	movw	r12, r18
 166:	7a 01       	movw	r14, r20
		int e = count - z*10;
 168:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 16c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 170:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 174:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
		display(e,number);
 178:	a9 01       	movw	r20, r18
 17a:	14 03       	mulsu	r17, r20
 17c:	90 01       	movw	r18, r0
 17e:	15 9f       	mul	r17, r21
 180:	30 0d       	add	r19, r0
 182:	11 24       	eor	r1, r1
 184:	82 0f       	add	r24, r18
 186:	93 1f       	adc	r25, r19
 188:	64 e0       	ldi	r22, 0x04	; 4
 18a:	71 e0       	ldi	r23, 0x01	; 1
 18c:	0e 94 ce 00 	call	0x19c	; 0x19c <display>
		display(z,number);
 190:	64 e0       	ldi	r22, 0x04	; 4
 192:	71 e0       	ldi	r23, 0x01	; 1
 194:	c6 01       	movw	r24, r12
 196:	0e 94 ce 00 	call	0x19c	; 0x19c <display>
 19a:	d8 cf       	rjmp	.-80     	; 0x14c <main+0x14>

0000019c <display>:
 *  Author: haypsilcn
 */ 

#include "sevenseg.h"
void display(int num, int numList[]){
	PORTD = numList[num];
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	fb 01       	movw	r30, r22
 1a2:	e8 0f       	add	r30, r24
 1a4:	f9 1f       	adc	r31, r25
 1a6:	80 81       	ld	r24, Z
 1a8:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	8f e3       	ldi	r24, 0x3F	; 63
 1ac:	9c e9       	ldi	r25, 0x9C	; 156
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <display+0x12>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <display+0x18>
 1b4:	00 00       	nop
	_delay_ms(10);
	PORTB ^= (1<<PINB0);
 1b6:	95 b1       	in	r25, 0x05	; 5
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	89 27       	eor	r24, r25
 1bc:	85 b9       	out	0x05, r24	; 5
 1be:	08 95       	ret

000001c0 <__udivmodsi4>:
 1c0:	a1 e2       	ldi	r26, 0x21	; 33
 1c2:	1a 2e       	mov	r1, r26
 1c4:	aa 1b       	sub	r26, r26
 1c6:	bb 1b       	sub	r27, r27
 1c8:	fd 01       	movw	r30, r26
 1ca:	0d c0       	rjmp	.+26     	; 0x1e6 <__udivmodsi4_ep>

000001cc <__udivmodsi4_loop>:
 1cc:	aa 1f       	adc	r26, r26
 1ce:	bb 1f       	adc	r27, r27
 1d0:	ee 1f       	adc	r30, r30
 1d2:	ff 1f       	adc	r31, r31
 1d4:	a2 17       	cp	r26, r18
 1d6:	b3 07       	cpc	r27, r19
 1d8:	e4 07       	cpc	r30, r20
 1da:	f5 07       	cpc	r31, r21
 1dc:	20 f0       	brcs	.+8      	; 0x1e6 <__udivmodsi4_ep>
 1de:	a2 1b       	sub	r26, r18
 1e0:	b3 0b       	sbc	r27, r19
 1e2:	e4 0b       	sbc	r30, r20
 1e4:	f5 0b       	sbc	r31, r21

000001e6 <__udivmodsi4_ep>:
 1e6:	66 1f       	adc	r22, r22
 1e8:	77 1f       	adc	r23, r23
 1ea:	88 1f       	adc	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	1a 94       	dec	r1
 1f0:	69 f7       	brne	.-38     	; 0x1cc <__udivmodsi4_loop>
 1f2:	60 95       	com	r22
 1f4:	70 95       	com	r23
 1f6:	80 95       	com	r24
 1f8:	90 95       	com	r25
 1fa:	9b 01       	movw	r18, r22
 1fc:	ac 01       	movw	r20, r24
 1fe:	bd 01       	movw	r22, r26
 200:	cf 01       	movw	r24, r30
 202:	08 95       	ret

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
