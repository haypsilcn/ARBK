
Praktikum03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000078e  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c1  00000000  00000000  00000a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000027c  00000000  00000000  000010d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001350  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000390  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001802  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  88:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setUp_Timer0>:
	PORTD ^= (1 << LED);					// toggling LED
}

void waitUntil(uint32_t ms) {
	//while (currentTimer <= ms);
	PORTD |= (1 << LED);		 			// setting bit for LED
  90:	92 e0       	ldi	r25, 0x02	; 2
  92:	94 bd       	out	0x24, r25	; 36
  94:	85 b5       	in	r24, 0x25	; 37
  96:	83 60       	ori	r24, 0x03	; 3
  98:	85 bd       	out	0x25, r24	; 37
  9a:	89 ef       	ldi	r24, 0xF9	; 249
  9c:	87 bd       	out	0x27, r24	; 39
  9e:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
  a2:	08 95       	ret

000000a4 <__vector_14>:
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
  b2:	af 93       	push	r26
  b4:	bf 93       	push	r27
  b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  be:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  c2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	a1 1d       	adc	r26, r1
  ca:	b1 1d       	adc	r27, r1
  cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  d0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  d4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
  d8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
  dc:	bf 91       	pop	r27
  de:	af 91       	pop	r26
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <waitFor>:
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
  f2:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <_edata>
  f6:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <_edata+0x1>
  fa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <_edata+0x2>
  fe:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <_edata+0x3>
 102:	ab 01       	movw	r20, r22
 104:	bc 01       	movw	r22, r24
 106:	40 0f       	add	r20, r16
 108:	51 1f       	adc	r21, r17
 10a:	62 1f       	adc	r22, r18
 10c:	73 1f       	adc	r23, r19
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 112:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 116:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 11a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 11e:	84 17       	cp	r24, r20
 120:	95 07       	cpc	r25, r21
 122:	a6 07       	cpc	r26, r22
 124:	b7 07       	cpc	r27, r23
 126:	98 f3       	brcs	.-26     	; 0x10e <waitFor+0x20>
 128:	9b b1       	in	r25, 0x0b	; 11
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	89 27       	eor	r24, r25
 12e:	8b b9       	out	0x0b, r24	; 11
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	08 95       	ret

00000136 <main>:

int main(void)
{
    /* Replace with your application code */
	
	DDRD = 0xff;							// Data direction register D (D0) as output
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 13a:	1b b8       	out	0x0b, r1	; 11
	setUp_Timer0();
 13c:	0e 94 48 00 	call	0x90	; 0x90 <setUp_Timer0>
	sei();									// set global interrupt enable
 140:	78 94       	sei
	
	waitFor(5000);							// wait for 5s from the beginning then turn on LED
 142:	68 e8       	ldi	r22, 0x88	; 136
 144:	73 e1       	ldi	r23, 0x13	; 19
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 77 00 	call	0xee	; 0xee <waitFor>
    while (1) 
    {
		waitFor(200);						// wait for 0.2s then toggle LED
 14e:	68 ec       	ldi	r22, 0xC8	; 200
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 77 00 	call	0xee	; 0xee <waitFor>
 15a:	f9 cf       	rjmp	.-14     	; 0x14e <main+0x18>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
